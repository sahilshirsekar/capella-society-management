// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Society {
  id            String            @id @default(cuid())
  name          String
  societyNumber String
  address       String
  pinCode       String
  email         String            @unique
  phone         String
  logo          String?
  buildings     Building[]
  members       CommitteeMember[]
  residents     Resident[]
  notices       Notice[]
  polls         Poll[]
  createdAt     DateTime          @default(now())
}

model CommitteeMember {
  id        String   @id @default(cuid())
  societyId String
  society   Society  @relation(fields: [societyId], references: [id], onDelete: Cascade)
  name      String
  email     String
  phone     String
  role      Role
  createdAt DateTime @default(now())
}

enum Role {
  PRESIDENT
  VICE_PRESIDENT
  TREASURER
  ASSISTANT_TREASURER
  SECRETARY
  MEMBER
}

model Resident {
  id           String   @id @default(cuid())
  societyId    String
  society      Society  @relation(fields: [societyId], references: [id], onDelete: Cascade)
  roomId       String?  @unique
  room         Room?    @relation(fields: [roomId], references: [id]) // Define relation here
  name         String
  email        String   @unique
  phone        String
  password     String
  isFirstLogin Boolean  @default(true)
  refreshToken String?
  createdAt    DateTime @default(now())
}

model Building {
  id        String  @id @default(cuid())
  name      String
  societyId String
  society   Society @relation(fields: [societyId], references: [id], onDelete: Cascade)
  floors    Floor[]
}

model Floor {
  id         String   @id @default(cuid())
  number     String
  buildingId String
  building   Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  rooms      Room[]
}

model Room {
  id       String    @id @default(cuid())
  number   String
  floorId  String
  floor    Floor     @relation(fields: [floorId], references: [id], onDelete: Cascade)
  resident Resident?
}

model Notice {
  id          String   @id @default(cuid())
  title       String
  description String
  attachments String[] @default([]) // Store file paths or URLs
  expiresAt   DateTime
  societyId   String
  society     Society  @relation(fields: [societyId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model Poll {
  id        String   @id @default(cuid())
  question  String
  options   String[] // Store JSON array of options
  votes     Json     @default("{}") // Store votes as a JSON object
  expiresAt DateTime
  societyId String
  society   Society  @relation(fields: [societyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

// model Shop {
//   id         String   @id @default(cuid())
//   name       String
//   owner      String
//   buildingId String
//   building   Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
// }
